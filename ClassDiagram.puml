@startuml
' Define the interface
interface OnlineCourse {
        + <T extends Student> boolean enrollStudent(T student);
        + <T extends Student> boolean enrollStudentS(Collection<T> students);
        + default void displayCourseDetails() {this.toString();};
}

' Define the org.digitalcareerinstitute.Student class with a note
class Student {
    + String name
}

note top of Student
    <<record>>
    Immutable data class with public fields.
end note

' Define classes that implement the OnlineCourse interface
class ProgrammingCourse implements OnlineCourse {
    - String courseName
    - String instructorName
    - List<Student> students
    + <T extends Student> boolean enrollStudent(T student)
    + <T extends Student> boolean enrollStudentS(Collection<T> students);
}

class MathCourse implements OnlineCourse {
    - String courseName
    - String instructorName
    - List<Student> students
    + <T extends Student> boolean enrollStudent(T student)
    + <T extends Student> boolean enrollStudentS(Collection<T> students);
}

' Define the CourseManager class
class CourseManager {
    - final List<OnlineCourse> onlineCourses
    - final List<Student> students;
    + public CourseManager()
    + boolean addCourse(String type, String courseName, String instructorName)
    + boolean enrollStudent(String courseName, String studentName)
    + displayCourseDetails(String courseName)
}

' Define relationships between the classes and interface
Student --> ProgrammingCourse : enrolled in
Student --> MathCourse : enrolled in
' ProgrammingCourse --> OnlineCourse
' MathCourse --> OnlineCourse
CourseManager --> OnlineCourse : manages
CourseManager --> Student : enrolls

@enduml
